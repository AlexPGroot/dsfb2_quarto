---
title: Parameterized report
navbar: false
format: 
  dashboard:
    theme: united
    orientation: rows
    scrolling: true
params:
  country: AUT
  year: NULL
  period: NULL
---


```{r}
#| echo: false
library(here)
library(tidyverse)
library(ggplot2)
library(plotly)
library(kableExtra)

# should contain
# params: country, year, period in month
# one graph for covid-19 cases
# one graph for covid-19 related deaths
```

```{r}
# load raw data
raw_data_0090 <- read.csv(here::here("data_raw/data_0090/data.csv"),na.strings = "", fileEncoding = "UTF-8-BOM")
```

```{r}
# load parameters
# if param = null, param = TRUE, else param = input
# TRUE prints all params, input prints input params
country_parameter <- if (is.null(params$country)) {
  TRUE
} else {
  raw_data_0090$countryterritoryCode == params$country
}

year_parameter <- if (is.null(params$year)) {
  TRUE
} else if (!is.numeric(params$year)){
  a_year <- params$year
  b_year <- a_year %>% strsplit(":") %>% unlist() %>% as.numeric()
  c_year <- seq(b_year[1], b_year[2])
  raw_data_0090$year %in% c_year
  } else {
  raw_data_0090$year %in% params$year
}

# Note regarding Quarto parameterized reports:
# Because Quarto's utilization of yaml for parameters, it is not possible to use r objects as input
# Therefore a period input of 1:8 will be read as "1:8" of chr class, we turn it back into a sequence here:
month_parameter <- if (is.null(params$period)) {
  TRUE
} else if (!is.numeric(params$period)) {
  a_period <- params$period
  b_period <- a_period %>% strsplit(":") %>% unlist() %>% as.numeric()
  c_period <- seq(b_period[1], b_period[2])
  raw_data_0090$month %in% c_period
} else {
  raw_data_0090$month %in% params$period
}

```

```{r}
# use all data or filter by specified params
data_fil <- raw_data_0090 %>%
  filter(country_parameter, year_parameter, month_parameter) %>%
  mutate(monthName = month.abb[month])
```

```{r}
data_long <- data_fil %>%
  pivot_longer(
    cols = c(cases, deaths), 
    names_to = "type", 
    values_to = "count"
  ) %>%
  mutate(
    full_date = lubridate::dmy(dateRep) # Convert dateRep to Date object
  )

```

# Report

## Row {height="60%"}

```{r}
#| column: screen
#| out-width: 100%

# extract country name
country_name_plot <- raw_data_0090 %>% filter(countryterritoryCode == params$country) %>% select(countriesAndTerritories) %>% unique() %>% pull()

p1 <- ggplot(data_long, aes(x = full_date)) +
  geom_col(aes(y = count, fill = type), data = filter(data_long, type == "cases"), size = 0.1) +
  geom_line(aes(y = count, color = type), data = filter(data_long, type == "deaths"), size = 0.1, linetype = "solid") +
  scale_x_date(date_labels = "%d-%b-%Y", date_breaks = "1 month") +
  scale_fill_manual(
    values = c("cases" = "darkblue"),
    labels = "Cases") +
  scale_color_manual(
    values = c("deaths" = "darkred"),
    labels = "Deaths") +
  labs(
    x = "Date",
    y = "Count",
    title = paste0("COVID-19 Cases and Deaths Over Time in ", country_name_plot),
    color = NULL,
    fill = NULL) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top"
  )

plotly::ggplotly(p1) %>% plotly::layout(
    hovermode = "x", # Align tooltips along the x-axis
    spikedistance = -1, # Display spike lines for all values at cursor
    xaxis = list(
      showspikes = TRUE, # Enable vertical spike
      spikemode = "across", # Spike lines across all traces
      spikesnap = "cursor", # Spike snaps to the cursor
      spikethickness = 1,
      showline = TRUE, # axis line
      showgrid = TRUE  # grid lines
    ))
```

## Row 2
```{r}
fil_most_cases <- data_fil[which.max(data_fil$cases),]
fil_most_deaths <- data_fil[which.max(data_fil$deaths),]
```

::: {.valuebox icon="virus" color="blue"}
Day with most cases
<br> Cases:
`r fil_most_cases$cases`
<br> Deaths:
`r fil_most_cases$deaths`
<br> Date:
`r fil_most_cases$dateRep`
:::

::: {.valuebox icon="exclamation-triangle" color="red"}
Day with most deaths
<br> Cases:
`r fil_most_deaths$cases`
<br> Deaths:
`r fil_most_deaths$deaths`
<br> Date:
`r fil_most_deaths$dateRep`
:::
## Row 3

### Column 1

```{r}
p2 <- data_long %>% filter(type == "cases") %>%
  ggplot(aes(x = full_date, y = count)) +
  geom_col(fill = "blue") +
  scale_x_date(date_labels = "%d-%b-%Y", date_breaks = "3 month") +
  labs(
    x = "Date",
    y = "Count",
    title = paste0("COVID-19 Cases Over Time in ", country_name_plot),
    color = "Type",
    fill = "Type"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top"
  )

plotly::ggplotly(p2) %>% plotly::layout(
    hovermode = "x", # Align tooltips along the x-axis
    spikedistance = -1, # Display spike lines for all values at cursor
    xaxis = list(
      showspikes = TRUE, # Enable vertical spike
      spikemode = "across", # Spike lines across all traces
      spikesnap = "cursor", # Spike snaps to the cursor
      spikethickness = 1, 
      showline = TRUE, # axis line
      showgrid = TRUE  # grid lines
    )
  )
```

### Column 2

```{r}
p3 <- data_long %>% filter(type == "deaths") %>%
  ggplot(aes(x = full_date, y = count)) +
  geom_col(fill = "red") +
  scale_x_date(date_labels = "%d-%b-%Y", date_breaks = "3 month") +
  labs(
    x = "Date",
    y = "Count",
    title = paste0("COVID-19 Deaths Over Time in ", country_name_plot),
    color = "Type",
    fill = "Type"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top"
  )

plotly::ggplotly(p3) %>% plotly::layout(
    hovermode = "x", # Align tooltips along the x-axis
    spikedistance = -1, # Display spike lines for all values at cursor
    xaxis = list(
      showspikes = TRUE, # Enable vertical spike
      spikemode = "across", # Spike lines across all traces
      spikesnap = "cursor", # Spike snaps to the cursor
      spikethickness = 1, 
      showline = TRUE, # axis line
      showgrid = TRUE  # grid lines
    )
  )
```


```{r}
#| echo: false
# return user parameter or unspecified if defaulted to null
return_if_null <- function(input) {
  if (is.null(input) || any(input == "null")) {
    return("unspecified")
  } else {
    return(input)
  }
}
```

### column

# Data table

## row

```{r}
#| eval: false
data_fil %>% kableExtra::kbl() %>%
  kableExtra::kable_paper(bootstrap_options = c("hover", "condensed", "responsive", position = "left")) %>%
  kableExtra::scroll_box(height = "900px") 
```

```{r}
#| eval: true
data_fil %>% gt::gt() %>% gt::opt_interactive(use_search = TRUE,
                                              use_filters = TRUE,
                                              use_page_size_select = TRUE)

```


```{r}
#| eval: false
data_fil %>% DT::datatable(height = "900px",
                           fillContainer = TRUE)
```

## row

<pre>
Data table using set parameters:
`r return_if_null(params$country)`, `r return_if_null(params$year)`, `r return_if_null(params$period)`
</pre>

# About

<br> This page was rendered using the following parameters:
<br> `r paste0(c("Country: " ,return_if_null(params$country)))`
<br> `r paste0(c("Year: " ,return_if_null(params$year)))`
<br> `r paste0(c("Period: " ,return_if_null(params$period)))`
<br><br> This report can be rendered using the following script: <a href="scripts/009_Parameterized_report.R">scripts/009_Parameterized_report.R</a>
<br> Data used: <a href="data_raw/data_0090/data.csv">data_raw/data_0090/data.csv</a>
<br> Data available from: <a href="https://www.ecdc.europa.eu/en/publications-data/data-daily-new-cases-covid-19-eueea-country">ECDC</a>
<br><br>available parameters are:
<br> Country: `r raw_data_0090$countryterritoryCode %>% unique()`
<br> Year: `r raw_data_0090$year %>% unique()`
<br> Period: `r raw_data_0090$month %>% unique()`


